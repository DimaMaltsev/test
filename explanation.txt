последовательность работы приложения:

1) Запускаем сервер с параметром "порт" из терминала
2) Запускается сокет сервер, ждет подсоединений

3) Когда клиент подсоединяется, сервер записывает его в пул подключившихся, но неавторизировавшихся
4) Клиент авторизируется (присылает сообщение "authorize"):
	Варианты авторизации (данные сообщения):
		1) Игровой Сервер ("server"): сокет сервер должен записать это соединение, как сервер соединение
		2) Игрок-клиент (""): сокет сервер должен записать это соединение в список авторизировавшихся соединений

5) События, присылаемые игровым сервером:
	1) "disconnect_client" ("id"): отключает игрока-клиента с id === "id";
	2) "rpc_to_client" ("id", "c"): отсылает сообщение "rpc" игроку-клиенту c id === "id" и добавляет поля "senderId" (айди севрер соединения) и "c" === "c" (контент, пришедший от клиента)

6) События, присылаемые игроком-клиентом
	1) "rpc_to_server" ("c"): отсылает сообщение "rpc" игровому серверу и добавляет поля "senderId" (айди клиента, отославшего rpc) и "c" === "c" (контент, пришедший от клиента)


7) Крайние ситуации:
	1) Если соединение авторизируется как "игрок-клиент" и сервер соединиение еще не авторизировалось, то система должна сразу отключить этого игрока-клиента.
	2) При подключении нового клиента, система должна отправить сервер соединению сообщение "client_connected" c id подключившегося соединения, а подключившемуся клиенту сообщение "connected_to_server";
	3) При одключении клиента система должна отправить сервер соединению сообщение "client_disconnected" с id отключившегося соединения
	4) При отключении сервер соединения, система должна отключить все клиентские соединения

8) Логгеры
	1) Все действия системы должны логироваться и быть доступными по <host>:<port>/logs